int lengthOfLongestSubstring(char* s) {
    if (!s || !*s) // Check if the string is empty
        return 0;
    
    int charIndexMap[256]; // Assuming ASCII characters
    memset(charIndexMap, -1, sizeof(charIndexMap)); // Initialize array with -1
    
    int maxLength = 0;
    int startIndex = 0;
    int i;
    
    for (i = 0; s[i] != '\0'; i++) {
        // If the character is already in the map and its index is after the start index of the current substring,
        // update the start index to the index after the last occurrence of the character
        if (charIndexMap[s[i]] != -1 && charIndexMap[s[i]] >= startIndex) {
            startIndex = charIndexMap[s[i]] + 1;
        }
        
        // Update the index of the current character
        charIndexMap[s[i]] = i;
        
        // Update the maximum length if the current substring is longer
        if (i - startIndex + 1 > maxLength) {
            maxLength = i - startIndex + 1;
        }
    }
    
    return maxLength;
}
double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    double s;
    int b;
    int t[nums1Size+nums2Size];
int i=0; int j=0; int k=0;
// Merging two sorted arrays
    while((i<nums1Size)&&(j<nums2Size))
    {   if(nums1[i]<nums2[j])
     {  t[k]=nums1[i];
        i++;
        k++;
     }
      else
     {  t[k]=nums2[j];
        j++;
        k++;
    }
    }
// If there are remaining elements in nums1
    if(i== nums1Size)
    {
        while(j<nums2Size)
        {   t[k]=nums2[j];
            j++;
            k++;
        }
    }
// If there are remaining elements in nums2
    if(j== nums2Size)
    {
        while(i<nums1Size)
        {   t[k]=nums1[i];
            i++;
            k++;
        }
    }
// Calculate the median
    if((nums1Size+nums2Size)%2!=0)
    {   // Odd length, return the middle element
        b=t[(nums1Size+nums2Size)/2];
        s=(double)b;
        return(s);
    }
    else 
    {   // Even length, return the average of the two middle elements
        s=((double)((t[(nums1Size+nums2Size)/2])+(t[((nums1Size+nums2Size)/2)-1])))/2;
        return(s);
    }
}
char* longestPalindrome(char* s) {
    char *start, *end;
    char *p = s, *subStart = s;
    int maxLen = 1;
    while(*p){
        start = p; end = p;
        
        while(*(end+1) && *(end+1) == *end){
            end++; // skip duplicates
        }
        p = end + 1;
        
        while(*(end + 1) && (start > s) && *(end + 1) == *(start - 1)){
            start--;
            end++;
        }
        if(end - start + 1 > maxLen){
            maxLen = end - start + 1;
            subStart = start;
        }
    }
    
    char *rst = (char *) calloc(maxLen + 1, sizeof(char));
    strncpy(rst, subStart, maxLen);
    return rst;
}
char * convert(char * s, int numRows){
    int size = strlen(s) + 5;
    if (numRows == 1 || size-5 <= numRows ) return s;
    
    char **zigzag = (char**)calloc(numRows * size, sizeof(char));
    for(int i = 0; i < numRows; i++) *(zigzag + i) = (char*) calloc(size, sizeof(char));
    
    int direction = -1, level = 0, i = 0; 
    while( s[i] != '\0' ){
        strncat(zigzag[level], &s[i++], 1);
        if ( level % (numRows-1) == 0 ) direction *= -1;
        level += direction;
    }
    strcpy(s, "");
    for(int i = 0; i < numRows; i++)strcat(s, zigzag[i]);
    
    for(int i = 0; i < numRows; i++){
        free(*(zigzag + i));
    }
    free(zigzag);
    return s;
}
int reverse(int x){
     int rev=0;
       while(x){
           if(rev>214748364||rev<(-214748364))
           return 0;
           rev=rev*10+x%10;
           x/=10;
       }
       x=rev;
       return x;
}
#include <limits.h>

inline bool is_num(char s) {
    return s >= '0' && s <= '9';
}

int myAtoi(char* s) {
    long long res = 0;
    bool is_negative = false;

    if (!s || strlen(s) == 0) {
        return res;
    }

    while (*s == ' ') {
        s++;
    }

    if (*s == '-') {
        is_negative = true;
        s++;

        if (!is_num(*s)) {
            return res;
        }
    }

    if (*s == '+') {
        s++;

        if (!is_num(*s)) {
            return res;
        }
    }

    long long temp = res;

    while (is_num(*s)) {
        temp = res * 10;
        temp = temp + (*s - '0');
        
        if (temp > INT_MAX) {
            res = is_negative ? INT_MIN : INT_MAX;
            return res;
        }
        
        res = temp;
        s++;
    }

    if (is_negative) {
        return res * -1;
    }

    return res;
}#include <limits.h>

inline bool is_num(char s) {
    return s >= '0' && s <= '9';
}

int myAtoi(char* s) {
    long long res = 0;
    bool is_negative = false;

    if (!s || strlen(s) == 0) {
        return res;
    }

    while (*s == ' ') {
        s++;
    }

    if (*s == '-') {
        is_negative = true;
        s++;

        if (!is_num(*s)) {
            return res;
        }
    }

    if (*s == '+') {
        s++;

        if (!is_num(*s)) {
            return res;
        }
#include <stdbool.h>
#include <string.h>

int memo[21][21]; // memo[i][j] - stores result of < isMatch(s[i..], p[j..]) >;

// isMatchHelper(i, j) - whether s[i..] matches p[j..];
bool isMatchHelper(int i, int j, char *s, char *p) {
    if (memo[i][j] != -1) {
        return memo[i][j];
    }

    bool ans;
    if (p[j] == '\0') {
        ans = (s[i] == '\0'); // Both strings reached the end;
    } else {
        bool first_match = (s[i] != '\0' && (p[j] == s[i] || p[j] == '.'));

        if (p[j + 1] == '*') {
            // Try zero occurrence or one/more occurrences;
            ans = isMatchHelper(i, j + 2, s, p) || (first_match && isMatchHelper(i + 1, j, s, p));
        } else {
            ans = first_match && isMatchHelper(i + 1, j + 1, s, p);
        }
    }

    memo[i][j] = ans;
    return ans;
}

bool isMatch(char *s, char *p) {
    memset(memo, -1, sizeof(memo)); // Initialize memoization table;
    return isMatchHelper(0, 0, s, p);
}
int maxArea(int* height, int heightSize) {
    int max_area = INT_MIN, i = 0, j = heightSize - 1;
    while(i < j) {
        if(height[i] > height[j]) {
            if(max_area < height[j] * (j - i))
                max_area = height[j] * (j - i);
            j--;
        }
        else {
            if(max_area < height[i] * (j - i))
                max_area = height[i] * (j - i);
            i++;
        }
    }
    return max_area;
}
char* intToRoman(int num) {
    // Allocate enough memory for the result string
    // Max length of Roman numeral for numbers up to 3999 is 15 (e.g., "MMMCMXCIX")
    char* s = (char*)malloc(20 * sizeof(char)); 
    int i = 0;
    
    // Handle the largest values first (greedy approach)
    while (num >= 1000) {
        s[i++] = 'M';
        num -= 1000;
    }
    
    // Check for 900 (CM)
    if (num >= 900) {
        s[i++] = 'C';
        s[i++] = 'M';
        num -= 900;
    }
    
    // Handle 500 (D)
    while (num >= 500) {
        s[i++] = 'D';
        num -= 500;
    }
    
    // Check for 400 (CD)
    if (num >= 400) {
        s[i++] = 'C';
        s[i++] = 'D';
        num -= 400;
    }
    
    // Handle 100 (C)
    while (num >= 100) {
        s[i++] = 'C';
        num -= 100;
    }
    
    // Check for 90 (XC)
    if (num >= 90) {
        s[i++] = 'X';
        s[i++] = 'C';
        num -= 90;
    }
    
    // Handle 50 (L)
    while (num >= 50) {
        s[i++] = 'L';
        num -= 50;
    }
    
    // Check for 40 (XL)
    if (num >= 40) {
        s[i++] = 'X';
        s[i++] = 'L';
        num -= 40;
    }
    
    // Handle 10 (X)
    while (num >= 10) {
        s[i++] = 'X';
        num -= 10;
    }
    
    // Check for 9 (IX)
    if (num >= 9) {
        s[i++] = 'I';
        s[i++] = 'X';
        num -= 9;
    }
    
    // Handle 5 (V)
    while (num >= 5) {
        s[i++] = 'V';
        num -= 5;
    }
    
    // Check for 4 (IV)
    if (num >= 4) {
        s[i++] = 'I';
        s[i++] = 'V';
        num -= 4;
    }
    
    // Handle 1 (I)
    while (num >= 1) {
        s[i++] = 'I';
        num -= 1;
    }
    
    // Null-terminate the string
    s[i] = '\0';
    
    // Return the constructed Roman numeral string
    return s;
}
int getValue(char roman){
    switch(roman){
        case 'I': return 1;
        case 'V': return 5;
        case 'X': return 10;
        case 'L': return 50;
        case 'C': return 100;
        case 'D': return 500;
        case 'M': return 1000;
        default : return 0; 
    }
}
int romanToInt(char* s) {
    int total =0;
    int prevValue = 0;
    for(int i = strlen(s)-1; i>=0; i--){
        int currentvalue = getValue(s[i]);

        if(currentvalue < prevValue){
            total -= currentvalue;
        }
        else{
            total += currentvalue;
        }
        prevValue = currentvalue;
    }
    return total;
}


char * longestCommonPrefix(char ** str, int size){

    int i,j,flag=0,k=0,min=100000;
    char *s = (char *)malloc(127*sizeof(char));
    strcpy(s,"");
    if(size==0)
        return s;
    char c;
    for(i=0;i<size;i++)
    {
        if(min>strlen(str[i]))
            min = strlen(str[i]);
    }
    for(i=0;i<min;i++,k++)
    {
        c = str[0][i];
        for(j=0;j<size;j++)
        {
            if(str[j][i]!=c)
            {
                flag = 1;
                break;
            }
        }
    //    printf("%d ",flag);
    //    printf("%d ",strlen(str[i]));
        if(flag)
            break;
        else
        {
            s[k] = c;
            s[k+1] = '\0';
        }
    }
 //   printf("%s",s);
    return s;
}
int cmp(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {
    qsort(nums, numsSize, sizeof(int), cmp);

    // Allocate memory for the result (matrix of triplets)
    int** result = (int**)malloc(sizeof(int*) * (numsSize * numsSize));
    *returnSize = 0;

    for (int i = 0; i < numsSize - 2; i++) {
        if (i > 0 && nums[i] == nums[i - 1]) continue; // Skip duplicate 'i' values

        int left = i + 1;
        int right = numsSize - 1;

        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];

            if (sum == 0) {
                // Found a valid triplet, allocate memory and store it
                result[*returnSize] = (int*)malloc(sizeof(int) * 3);
                result[*returnSize][0] = nums[i];
                result[*returnSize][1] = nums[left];
                result[*returnSize][2] = nums[right];
                (*returnSize)++;

                // Skip duplicate 'left' and 'right' values
                while (left < right && nums[left] == nums[left + 1]) left++;
                while (left < right && nums[right] == nums[right - 1]) right--;

                left++;
                right--;
            } else if (sum < 0) {
                left++;
            } else {
                right--;
            }
        }
    }

    // Allocate and set returnColumnSizes
    *returnColumnSizes = (int*)malloc(sizeof(int) * (*returnSize));
    for (int i = 0; i < *returnSize; i++) {
        (*returnColumnSizes)[i] = 3;
    }

    return result;
}
int compare(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

int threeSumClosest(int* nums, int numsSize, int target) {
    qsort(nums, numsSize, sizeof(int), compare);
    int closest = nums[0] + nums[1] + nums[2]; 

    for (int i = 0; i < numsSize - 2; i++) {
        int left = i + 1;
        int right = numsSize - 1;

        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];
            if (abs(target - sum) < abs(target - closest)) {
                closest = sum; 
            }

            if (sum < target) {
                left++;
            } else if (sum > target) {
                right--;
            } else {
                return sum; 
            }
        }
    }

    return closest;
}
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* removeNthFromEnd(struct ListNode* head, int n) {
    if(head==NULL || (head->next==NULL)){
        return NULL;
    }
    int i=0,a;
    struct ListNode *temp,*d;
    temp=head;
    while(temp!=NULL){
        i++;
        temp=temp->next;
    }
    if(n==i)
    return head->next;
    temp=head;
    a=i-n-1;
    while(a!=0){
        temp=temp->next;
        a--;
    }
    d=temp->next;
    temp->next=temp->next->next;
    free(d);
    return head;
}
bool isValid(char* s) {
    int len =strlen(s);
    char stack[len];
    int top = -1;
    for(int i=0;i<len;i++){
        if(s[i]=='(' || s[i] == '{' || s[i] == '[' ){
            stack[++top] = s[i];
        }else{
            if(top == -1 ||( s[i]==')'&&stack[top] != '(')||(s[i]=='}'&&stack[top] != '{')||(s[i]==']'&&stack[top]!='[')){
                return false;
            } 
            top--;
        } 
    }  
    return top == -1; 
}
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
void insert (struct ListNode** head,int num){
    struct ListNode* new = (struct ListNode*)malloc(sizeof(struct ListNode));
    new->val = num;
    new->next = NULL;

    if(*head == NULL){
        *head = new;
    }else{
        struct ListNode* temp = *head;
        while(temp->next != NULL){
            temp =temp->next;
        }
        temp->next = new;
    }
}

struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {
    struct ListNode* head = NULL;
    while(list1 != NULL && list2 != NULL){
        if(list1->val < list2->val){
            insert(&head,list1->val);
            list1 = list1->next;
        }else{
            insert(&head,list2->val);
            list2 = list2->next;
        }
    }
    while(list1 != NULL){
        insert(&head,list1->val);
        list1 = list1->next;
    }
    while(list2 != NULL){
        insert(&head,list2->val);
        list2 = list2->next;
    }

    return head;
}
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char **res;
int resIdx;
int strSize;
void help(int l, int r, char* str, int strIdx) {
    if(!(l||r)) {
        res[resIdx] = (char*)calloc(strSize, sizeof(char));
        strcpy(res[resIdx++], str);
        return;
    }
    if(l) {
        str[strIdx] = '(';
        help(l-1, r, str, strIdx+1);
    }
    if(r-l) {
        str[strIdx] = ')';
        help(l, r-1, str, strIdx+1);
    }
}
char** generateParenthesis(int n, int* returnSize) {
    resIdx = 0;
    strSize = n*2+1;
    res = (char**)calloc(1<<(n*2), sizeof(char*));
    char* str = (char*)calloc(strSize, sizeof(char));
    help(n, n, str, 0);
    *returnSize = resIdx;
    return res;
}
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

 struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {
    struct ListNode* new_head=NULL;
    struct ListNode* tail=NULL;

    if (list1 == NULL){
        return list2;
    }
    if(list2 == NULL){
        return list1;
    }

    while(list1 != NULL && list2 != NULL){
        if(list1->val < list2->val){
            //add_with_tail(&new_head,&tail,list1->val);
            if (new_head == NULL){
                new_head = list1;
                tail = new_head;
            }else{
                tail->next = list1;
                tail = list1;
            }
            list1 = list1->next;
        }else{
            //add_with_tail(&new_head,&tail,list2->val);
            if (new_head == NULL){
                new_head = list2;
                tail = new_head;
            }else{
                tail->next = list2;
                tail = list2;
            }
            list2 = list2->next;
        }
    }
    
    if(list1 != NULL){
        tail->next=list1;
    }
    if(list2 != NULL){
        tail->next=list2;
    }
    
    return new_head;
}


struct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {
    if (listsSize <= 0){
        return NULL;
    }
    struct ListNode *head = lists[0];
    struct ListNode *temp_list_head = *lists;

    for(int i = 1; i < listsSize;i++){
        head = mergeTwoLists(head,lists[i]);
    }
    return head;
}
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* swapPairs(struct ListNode* head){
    if(head==NULL || head->next==NULL)
    return head;
    struct ListNode*x,*y,*z=NULL;
    x=head;
    y=head->next;
    if(head->next->next!=NULL)
    {
        z=head->next->next;
    }
    head=y;
    while(z!=NULL && z->next!=NULL)
    {
        y->next=x;
        x->next=z->next;
        x=z;
        y=x->next;
        z=y->next;
    }
    y->next=x;
    x->next=z;
    return head;
}
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* reverseKGroup(struct ListNode* head, int k) {
    // Base case: if the current segment has less than k nodes, return head
    struct ListNode* current = head;
    int count = 0;
    while (count < k && current) {
        current = current->next;
        count++;
    }
    if (count < k) {
        return head;
    }
    
    // Reverse the current segment
    struct ListNode* prev = NULL;
    struct ListNode* next_node = NULL;
    current = head;
    for (int i = 0; i < k; i++) {
        next_node = current->next;
        current->next = prev;
        prev = current;
        current = next_node;
    }
    
    // Recursively reverse the next segment
    head->next = reverseKGroup(current, k);
    
    return prev;
}

